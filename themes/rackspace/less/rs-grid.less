/***********************************
* Define custom multi-grid system. *
************************************/

// Mixin to define column widths based on the number of columns specified.
.generate-columns(@num_cols, @col_idx: 1) when (@col_idx =< @num_cols) {

  // Generates default class to define style for both mobile and desktop.
  .col-sm-@{col_idx} {
    width: (@col_idx / @num_cols) * 100%;
  }

  // Generates override class to define style for desktop-only.
  @media screen and (min-width: @responsive_break) {
    .col-lg-@{col_idx} {
      width: (@col_idx / @num_cols) * 100%;
    }
  }
  .generate-columns(@num_cols, (@col_idx + 1));
}

// Mixin to define a grid of the specified size.
.generate-grid(@grid_size) {
  .grid@{grid_size} {
     .generate-columns(@grid_size);
  }
}

// Loop through our grid array and generate all of the appropriate grid sizes.
.-(@idx: length(@grids)) when (@idx > 0) {
 @grid_size: extract(@grids, @idx);
.generate-grid(@grid_size);
} .-;

// Sets parameters for content containers.
.container {
  margin: 0 auto;
  max-width: @max_container_width;
  width: 95%;
}


// Hide an element on the small orientation of the site.
@media screen and (max-width: (@responsive_break - 1px)) {
  .hidden-sm {
    display: none;
  }
}

// Show an element on the large orientation of the site.
@media screen and (min-width: (@responsive_break)) {
  .hidden-lg {
    display: none;
  }
}